---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# Legends
# 📝 Use your own values

Globals:
  Function:
    Runtime: python3.11
    Handler: app.lambda_handler

Parameters:
  RootDomain:
    Type: String
    Default: gustavomejia.tech
    Description: "Root domain for the API Gateway"

  SECRETTELEGRAMBOTTOKEN:
    Type: String
    Description: "Telegram bot token"

  SECRETCHATID:
    Type: String
    Description: "Telegram chat id"

Resources:
  # 🟣 External Domain
  MyHostedDomain:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref RootDomain

  # 🔴 SSL Certificate
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${RootDomain}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "*.${RootDomain}"
          HostedZoneId: !Ref MyHostedDomain

  # 🟣 Subdomain Api Gateway http api
  ExampleSubdomainApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "${AWS::StackName}-ExampleSubdomain"  # 📝
      StageName: Prod
      Domain:
        DomainName: !Sub "example.${RootDomain}"  # 📝
        CertificateArn: !Ref ACMCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref MyHostedDomain

  # 🟠 Layers Libs/Utils/Etc
  LayerLibs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: libs/
      LayerName: !Sub "${AWS::StackName}-Libs"
    Metadata:
      BuildMethod: python3.11

  # 🟠 Lambda Functions
  ExampleFunction:  # 📝
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/  # 📝
      Description: | # 📝
        "This is an example.
        Use it as a reference to create your own function."
      FunctionName: !Sub "${AWS::StackName}-ExampleFunction"  # 📝

  ExampleLayer:  # 📝
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleLayer/  # 📝
      Description: | # 📝
        "This is an example.
        Use it as a reference to create your own function with layers."
      FunctionName: !Sub "${AWS::StackName}-ExampleLayer"  # 📝
      Layers:
        - !Ref LayerLibs
      Policies:
        - AWSLambdaBasicExecutionRole

  ExampleCronjob:  # 📝
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/  # 📝
      Description: | # 📝
        "This is an example.
        Use it as a reference to create your own cronjob."
      FunctionName: !Sub "${AWS::StackName}-ExampleCronjob"  # 📝
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 1 1 ? *)  # Ene 1 a las 12:00 AM UTC
            Enabled: false

  ExampleApi:  # 📝
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/  # 📝
      Description: | # 📝
        "This is an example.
        Use it as a reference to create your own endpoint."
      FunctionName: !Sub "${AWS::StackName}-ExampleApi"  # 📝
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ExampleAPIEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExampleSubdomainApiGateway
            Method: GET
            Path: /example  # 📝

  HelloWorldCamicase:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/HelloWorldCamicase/
      Description: "Hello world of Camicase" # 📝
      FunctionName: !Sub "${AWS::StackName}-HelloWorldCamicase"  # 📝
      Policies:
        - AWSLambdaBasicExecutionRole

  CrawlerMalpensante:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CrawlerMalpensante/
      Description: |
        "This script fetch the information of articles from Malpensante as rss feed"
      FunctionName: !Sub "${AWS::StackName}-CrawlerMalpensante"
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        HeadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExampleSubdomainApiGateway
            Method: HEAD
            Path: /rss/malpensante
        ExampleAPIEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExampleSubdomainApiGateway
            Method: GET
            Path: /rss/malpensante
      Timeout: 300 # 300 seconds (5 minutes)


  PacktCrawler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/PacktCrawler/
      Description: |
        "This script fetch the information of free books from Packt"
      FunctionName: !Sub "${AWS::StackName}-PacktCrawler"
      Handler: app.lambda_handler
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN: !Ref SECRETTELEGRAMBOTTOKEN
          CHAT_ID: !Ref SECRETCHATID
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 11 * * ? *) # 11:00 AM UTC o 6:00 AM GMT-5
            Enabled: true
      Layers:
        - !Ref LayerLibs
      Policies:
        - AWSLambdaBasicExecutionRole
      MemorySize: 2560 # 2.5 GB
      Timeout: 300 # 300 seconds (5 minutes)

Outputs:
  HostedZoneNameServers:
    Description: "Please copy the name servers below to your DNS provider"
    Value: !Join [",", !GetAtt MyHostedDomain.NameServers]
  HostedZoneArn:
    Description: "Please use this Id to create records"
    Value: !GetAtt MyHostedDomain.Id
  StackInfo:
    Value: !Sub "Stack name: ${AWS::StackName}, Id: ${AWS::StackId}"
...
