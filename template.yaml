AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.11
    Handler: app.lambda_handler
Parameters:
  RootDomain:
    Type: String
    Default: gustavomejia.tech
    Description: Root domain for the API Gateway
  SECRETTELEGRAMBOTTOKEN:
    Type: String
    Description: Telegram bot token
  SECRETCHATID:
    Type: String
    Description: Telegram chat id
Resources:
  MyHostedDomain:
    Type: AWS::Route53::HostedZone
    Properties:
      Name:
        Ref: RootDomain
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub: '*.${RootDomain}'
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Fn::Sub: '*.${RootDomain}'
        HostedZoneId:
          Ref: MyHostedDomain
  ExampleSubdomainApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ExampleSubdomain
      StageName: Prod
      Domain:
        DomainName:
          Fn::Sub: example.${RootDomain}
        CertificateArn:
          Ref: ACMCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId:
            Ref: MyHostedDomain
  LayerLibs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: libs/
      LayerName:
        Fn::Sub: ${AWS::StackName}-Libs
    Metadata:
      BuildMethod: python3.11
  CrawlerMalpensante:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/CrawlerMalpensante/src
      Description: '"This script fetch the information of articles from Malpensante
        as rss feed"

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-CrawlerMalpensante
      Policies:
      - AWSLambdaBasicExecutionRole
      Events:
        HeadEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: ExampleSubdomainApiGateway
            Method: HEAD
            Path: /rss/malpensante
        ExampleAPIEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: ExampleSubdomainApiGateway
            Method: GET
            Path: /rss/malpensante
      Timeout: 300
  ExampleApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/src
      Description: 'This is an example.

        Use it as a reference to create your own endpoint.

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExampleApi
      Policies:
      - AWSLambdaBasicExecutionRole
      Events:
        ExampleAPIEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: ExampleSubdomainApiGateway
            Method: GET
            Path: /example
  ExampleCronjob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/src
      Description: '"This is an example.

        Use it as a reference to create your own cronjob."

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExampleCronjob
      Policies:
      - AWSLambdaBasicExecutionRole
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 1 1 ? *)
            Enabled: false
  ExampleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleFunction/src
      Description: 'This is an example.

        Use it as a reference to create your own function.

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExampleFunction
  ExampleLayer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ExampleLayer/src
      Description: '"This is an example.

        Use it as a reference to create your own function with layers."

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ExampleLayer
      Layers:
      - Ref: LayerLibs
      Policies:
      - AWSLambdaBasicExecutionRole
  HelloWorldCamicase:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/HelloWorldCamicase/src
      Description: Hello world of Camicase
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HelloWorldCamicase
      Policies:
      - AWSLambdaBasicExecutionRole
  PacktCrawler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/PacktCrawler/src
      Description: '"This script fetch the information of free books from Packt"

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PacktCrawler
      Handler: app.lambda_handler
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN:
            Ref: SECRETTELEGRAMBOTTOKEN
          CHAT_ID:
            Ref: SECRETCHATID
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 11 * * ? *)
            Enabled: true
      Layers:
      - Ref: LayerLibs
      Policies:
      - AWSLambdaBasicExecutionRole
      MemorySize: 2560
      Timeout: 300
  RssAgendaCulturalBogota:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/RssAgendaCulturalBogota/src
      Description: '"This script fetch the information of bogota agenda as rss feed"

        '
      FunctionName:
        Fn::Sub: ${AWS::StackName}-RssAgendaCulturalBogota
      Policies:
      - AWSLambdaBasicExecutionRole
      Events:
        ExampleAPIEvent:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: ExampleSubdomainApiGateway
            Method: GET
            Path: /rss/agenda-cultural-bogota
      Timeout: 30
Outputs:
  HostedZoneNameServers:
    Description: Please copy the name servers below to your DNS provider
    Value:
      Fn::Join:
      - ','
      - Fn::GetAtt: MyHostedDomain.NameServers
  HostedZoneArn:
    Description: Please use this Id to create records
    Value:
      Fn::GetAtt: MyHostedDomain.Id
  StackInfo:
    Value:
      Fn::Sub: 'Stack name: ${AWS::StackName}, Id: ${AWS::StackId}'
